generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions matching TypeScript enums
enum EventStatus {
  DRAFT
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum EventVisibility {
  PRIVATE
  FAMILY
  PUBLIC
}

// User model (referenced by events, invitations, reminders)
model User {
  id               String            @id @default(cuid())
  familyId         String
  name             String
  events           Event[]
  eventInvitations EventInvitation[]
  eventReminders   EventReminder[]
}

// Family model to group events
model Family {
  id     String  @id @default(cuid())
  name   String
  events Event[]
}

// Event model with comprehensive details
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean  @default(false)
  location    String?

  // Status and Visibility
  status     EventStatus     @default(DRAFT)
  visibility EventVisibility @default(PRIVATE)

  // Recurrence Support
  recurrenceRule   String?
  recurrenceConfig Json?

  // Relationships
  userId   String
  familyId String
  taskId   String?

  user   User   @relation(fields: [userId], references: [id])
  family Family @relation(fields: [familyId], references: [id])

  // Optional related models
  invitations EventInvitation[]
  reminders   EventReminder[]

  // Metadata
  metadata Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([userId])
  @@index([familyId])
  @@index([taskId])
  @@index([status])
  @@index([visibility])
  @@index([startTime])
  @@index([createdAt])
}

// Event Invitation model
model EventInvitation {
  id      String @id @default(cuid())
  eventId String
  userId  String
  status  String @default("PENDING")
  role    String @default("ATTENDEE")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  // Unique constraint to prevent duplicate invitations
  @@unique([eventId, userId])
  // Indexes for performance
  @@index([eventId])
  @@index([userId])
}

// Event Reminder model
model EventReminder {
  id                 String   @id @default(cuid())
  eventId            String
  userId             String
  reminderTime       DateTime
  notificationMethod String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  // Indexes for performance
  @@index([eventId])
  @@index([userId])
  @@index([reminderTime])
}
